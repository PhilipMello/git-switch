#!/usr/bin/env bash
# Author
author="Philip Mello <@Microsoft>"
# Version
version="1.2"
# License
license="MIT"
# Date
current_date=$(date +'%b %d, %Y')
# GitHub
github='https://github.com/PhilipMello/git-switch'

script="GitHub Account Switch"
description="Multiple Github Accounts into one CLI"

echo "
        _____         _ _       _     
       / ____|       (_) |     | |      $version
  __ _| (_____      ___| |_ ___| |__    $current_date
 / _. |\___ \ \ /\ / / | __/ __| |_ \   $author
| (_| |____) \ V  V /| | || (__| | | |  $license
 \___ |_____/ \_/\_/ |_|\__\___|_| |_|
  __/ |                               
 |___/  $github                            

# --------------------------------------------------------------
# Script     : $script
# Description: $description
# --------------------------------------------------------------
# How to use: Execute gswitch
# Exemples:
# Manual: gswitch -h OR gswitch --h OR gswitch --help
# Switch account using parameter: gswitch --account1
# --------------------------------------------------------------
"
WHITE=""
BLUE="\033[97;104m"
YELLOW="\033[97;103m"
CYAN="\033[97;106m"
MAGENTA="\033[97;45m"
GREEN="\033[97;102m"
RED="\033[97;41m"
ENDCOLOR="\e[0m"

function github_generate_sshkey() {
    echo "Go to your GitHub Portal and add your SSH Key
    'https://github.com/settings/ssh/new'
    "

    # Prompt user for the number of accounts to create
    read -p "How many GitHub accounts do you want to create (0-9)? " num_accounts

    # Validate the input for the number of accounts
    if ! [[ "$num_accounts" =~ ^[0-9]+$ ]] || [ "$num_accounts" -lt 0 ] || [ "$num_accounts" -gt 9 ]; then
    echo "Invalid number. Please enter a number between 0 and 9."
    exit 1
    fi

    # Prompt user to create the specified number of accounts
    for ((i = 0; i < num_accounts; i++)); do
    read -p "Type your GitHub email account for account #$i: " github_email_account

    # Validate email format (basic check)
    if [[ ! "$github_email_account" =~ ^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$ ]]; then
        echo "Invalid email format. Please try again."
        continue
    fi

    # Generate the SSH key with the provided email and a custom filename
    ssh-keygen -t ed25519 -C "$github_email_account" -f "$HOME/.ssh/id_ed25519_account_$i"

    echo -e "
        +-----------------------------------------------------------+
        |${GREEN}SSH key generated for: $github_email_account${ENDCOLOR}
        |${GREEN}Key saved as: $HOME/.ssh/id_ed25519_account_$i${ENDCOLOR}
        +-----------------------------------------------------------+
        "
    done
}

function github_connection_test() {
    # Github test connection
    echo "Github connection testing..."
    ssh -T git@github.com
}

function github_set_account() {
    # Github set account
    read -p "Enter your Github Account Name": github_set_account_name
    read -p "Enter your Github Account Email": github_set_account_email
    git config user.name "$github_set_account_name"
    git config user.email "$github_set_account_email"
}

function github_account_switch() {
    # GitHub Account Switch (2 Accounts)
    echo -e "You're logged in as:\n"
    ssh -T git@github.com

    emails=()
    files=()

    while IFS=: read -r file email; do
        emails+=("$email")
        files+=("$(basename "$file")")
    done < <(grep -H -Eo '[A-Za-z0-9._%+-]+@([A-Za-z0-9._%+-]+)?' ~/.ssh/id_* 2>/dev/null)

    if [ ${#emails[@]} -eq 0 ]; then
        echo "No accounts found."
        exit 1
    fi

    echo "Select an email:"
    for i in "${!emails[@]}"; do
        echo "$((i+1)). ${emails[i]}"
    done

    read -p "Enter the number of your account: " choice

    if ! [[ "$choice" =~ ^[0-9]+$ ]] || [ "$choice" -lt 1 ] || [ "$choice" -gt "${#emails[@]}" ]; then
        echo "Invalid choice. Exiting."
        exit 1
    fi

    selected_email=${emails[$((choice-1))]}
    selected_file=${files[$((choice-1))]}

    # Remove the "id_" prefix from the filename
    stripped_file_prefix=${selected_file#id_}

    # Remove the ".pub" suffix from the filename
    stripped_file_suffix=${selected_file%.pub}

    echo -e "GitHub Account $selected_email Selected!\n"
    
    # Copy the selected private and public key files with stripped filename
    cp ~/.ssh/$stripped_file_suffix ~/.ssh/id_ed25519
    cp ~/.ssh/$selected_file ~/.ssh/id_ed25519.pub

    # Test SSH connection
    ssh -T git@github.com
}

function github_fix_permissions() {
    # Git fix files permissions
    echo "Fixing SSH file permissions..."
    chown $USER:$USER -R  ~/.ssh
    chmod 600  ~/.ssh/*
    echo -e "
    +-----------------------------------------------------------+
    |${GREEN}Files permissions has been fixed${ENDCOLOR}
    +-----------------------------------------------------------+
    "
}

function github_show_config() {
    echo "Run gSwitch in git directory level"
    grep -E "name|email" .git/config
}

function github_show_accounts() {
    # Show account in ~/.ssh
    cat ~/.ssh/id_* | grep -Eo '[A-Za-z0-9._%+-]+@([A-Za-z0-9._%+-]+)?' | while read -r email; do
    echo "-----------------------------------------"
    echo "| Email: $email |"
    echo "-----------------------------------------"
done
}

function backup_ssh_folder() {
    # Get the current username
    current_user=$(whoami)

    # Get the current date and time for the backup filename
    timestamp=$(date +"%Y-%m-%d_%H-%M-%S")
    backup_name="ssh_backup_"$current_user"_$timestamp.tar.gz"

    # Define the mount point directory
    mount_dir="/media/$current_user"

    # Prompt user to choose a storage device
    echo "Available devices for storage:"
    # List all devices in the mount directory
    devices=("$mount_dir"/*)

    for i in "${!devices[@]}"; do
        echo "$((i+1)). ${devices[i]}"
    done
    echo "$(( ${#devices[@]} + 1 )). Save to ~/Desktop/ssh_backup (default)"

    read -p "Choose a storage device (1-${#devices[@]} or press Enter for default): " choice

    # Determine the backup location
    if [[ -z "$choice" || "$choice" -lt 1 || "$choice" -gt "$(( ${#devices[@]} + 1 ))" ]]; then
        backup_location=~/Desktop/ssh_backup
    else
        backup_location="${devices[$((choice-1))]}"
    fi

    # Ensure the backup location exists
    mkdir -p "$backup_location"

    # Create the backup
    tar -czf "$backup_location/$backup_name" -C ~ .ssh

    echo "Backup saved to $backup_location/$backup_name"
}

function restore_ssh_folder() {
    # Get the current username
    current_user=$(whoami)

    # Define the mount point directory
    mount_dir="/media/$current_user"

    # Prompt user to choose a storage device
    echo "Available devices for storage:"
    # List all devices in the mount directory
    devices=("$mount_dir"/*)

    for i in "${!devices[@]}"; do
        echo "$((i+1)). ${devices[i]}"
    done
    echo "$(( ${#devices[@]} + 1 )). ~/Desktop/ssh_backup (default)"

    read -p "Choose a storage device (1-${#devices[@]} or press Enter for default): " choice

    # Determine the backup restore location
    if [[ -z "$choice" || "$choice" -lt 1 || "$choice" -gt "$(( ${#devices[@]} + 1 ))" ]]; then
        backup_location=~/Desktop/ssh_backup
    else
        backup_location="${devices[$((choice-1))]}"
    fi

    # List available backup files
    echo "Searching for backup files in $backup_location..."
    backup_files=("$backup_location"/*.tar.gz)
    
    if [[ ${#backup_files[@]} -eq 0 || "${backup_files[0]}" == "$backup_location/*.tar.gz" ]]; then
        echo "No backup files found in $backup_location."
        return
    fi

    echo "Available backup files:"
    for i in "${!backup_files[@]}"; do
        echo "$((i+1)). ${backup_files[i]}"
    done

    read -p "Choose a file to restore (1-${#backup_files[@]}): " choice

    if ! [[ "$choice" =~ ^[0-9]+$ ]] || [ "$choice" -lt 1 ] || [ "$choice" -gt "${#backup_files[@]}" ]; then
        echo "Invalid choice. Exiting."
        return
    fi

    selected_file="${backup_files[$((choice-1))]}"

    # Confirm restore
    echo "You selected: $selected_file"
    read -p "This will overwrite your current ~/.ssh folder. Are you sure? (y/n): " confirm
    if [[ "$confirm" != "y" ]]; then
        echo "Restore cancelled."
        return
    fi

    # Extract the backup
    tar -xzf "$selected_file" -C ~

    echo "Restore complete. ~/.ssh folder restored from $selected_file."
}

function ssh_options() {
    read -p "Choose an option (1: Backup, 2: Restore): " option
    
    [[ "$option" == "1" ]] && backup_ssh_folder \
    || ([[ "$option" == "2" ]] && restore_ssh_folder \
    || echo "Invalid option.")
}

# <-- Manual - BEGIN

manual() {
    echo -e "
    ##############################################################
    #                        Manual                              #
    ##############################################################
    
    Option #1
    Switch Github Account.
    ----------------------

    Option #2
    Generate SSH Key.
    ----------------------

    Option #3
    Test Github SSH Connection, showing the current user logged in.
    ----------------------

    Option #4
    Set Github Account in current directory.
    ---------------------------

    Option #5
    Fix SSH file permissions.

    For manual fixing: chmod 600  ~/.ssh/*
    Check permission by using: ls -lrht  ~/.ssh/*
    the correct output should be: -rw-------
    ---------------------------

    Option #6
    Show current GitHub account details.
    ---------------------------

    Option #7
    Show All Account in: ~/.ssh
    ---------------------------

    Option #8
    Backup or Restore SSH folder: ~/.ssh
    ---------------------------
    
    Parameters:
    --account1          Switch to GitHub Account 1
    --account2          Switch to GitHub Account 2
    
    ---------------------------
    
    ##############################################################
    # For more information or to report issues, visit the GitHub: #
    # $github                   #
    ##############################################################
    "
    exit 0
}

if [[ $1 == "-h" || $1 == "--help" || "$1" == "--h" ]]; then
    manual
fi

# Manual - END -->


if [[ $1 == "--account1" ]]; then
    cp ~/.ssh/id_ed25519_account1 ~/.ssh/id_ed25519
    cp ~/.ssh/id_ed25519_account1.pub ~/.ssh/id_ed25519.pub
    echo -e "Github Account #1 has been selected!\n"
    ssh -T git@github.com
elif [[ $1 == "--account2" ]]; then
    cp ~/.ssh/id_ed25519_account2 ~/.ssh/id_ed25519
    cp ~/.ssh/id_ed25519_account2.pub ~/.ssh/id_ed25519.pub
    echo -e "Github Account #2 has been selected!\n"
    ssh -T git@github.com
fi

echo "Choose an option:"
echo "1. Switch GitHub Account"
echo "2. Generate SSH Key"
echo "3. Test Github SSH connection"
echo "4. Set Github account"
echo "5. Fix SSH file permissions"
echo "6. Show current GitHub config"
echo "7. Show Account in: ~/.ssh"
echo "8. Backup or Restore SSH folder: ~/.ssh"
read option

case $option in
    1)
        github_account_switch
        ;;
    2)  
        github_generate_sshkey
        ;;
    3)
        github_connection_test
        ;;
    4)
        github_set_account
        ;;
    5)
        github_fix_permissions
        ;;
    6)
        github_show_config
        ;;
    7)
        github_show_accounts
        ;;
    8)
        ssh_options
        ;;
    *)
        echo "Invalid option"
        ;;
esac